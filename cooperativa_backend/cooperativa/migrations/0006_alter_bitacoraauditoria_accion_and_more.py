# Generated by Django 5.0 on 2025-09-17 05:07

import cooperativa.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cooperativa', '0005_bitacoraauditoria_ip_address_and_more'),
    ]

    operations = [
        migrations.AlterField(
            model_name='bitacoraauditoria',
            name='accion',
            field=models.CharField(choices=[('CREAR', 'Crear'), ('ACTUALIZAR', 'Actualizar'), ('ELIMINAR', 'Eliminar'), ('LOGIN', 'Inicio de sesión'), ('LOGOUT', 'Cierre de sesión'), ('LOGIN_FALLIDO', 'Intento de login fallido'), ('SESION_EXPIRADA', 'Sesión expirada'), ('SESION_INVALIDADA', 'Sesión invalidada'), ('BLOQUEO_CUENTA', 'Cuenta bloqueada'), ('DESBLOQUEO_CUENTA', 'Cuenta desbloqueada'), ('CAMBIAR_PASSWORD', 'Cambio de contraseña'), ('RESET_PASSWORD', 'Reset de contraseña'), ('ACCESO_DENEGADO', 'Acceso denegado'), ('PERMISO_INSUFICIENTE', 'Permiso insuficiente'), ('ACTIVAR_SOCIO', 'Activar socio'), ('DESACTIVAR_SOCIO', 'Desactivar socio'), ('ACTIVAR_USUARIO', 'Activar usuario'), ('DESACTIVAR_USUARIO', 'Desactivar usuario'), ('INICIAR_CICLO_CULTIVO', 'Iniciar ciclo de cultivo'), ('FINALIZAR_CICLO_CULTIVO', 'Finalizar ciclo de cultivo'), ('REGISTRAR_COSECHA', 'Registrar cosecha'), ('APLICAR_TRATAMIENTO', 'Aplicar tratamiento'), ('ANALISIS_SUELO', 'Realizar análisis de suelo'), ('TRANSFERIR_PARCELA', 'Transferir parcela'), ('ACTIVAR_PARCELA', 'Activar parcela'), ('DESACTIVAR_PARCELA', 'Desactivar parcela'), ('ACTIVAR_CULTIVO', 'Activar cultivo'), ('DESACTIVAR_CULTIVO', 'Desactivar cultivo')], max_length=50),
        ),
        migrations.AlterField(
            model_name='comunidad',
            name='departamento',
            field=models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='Departamento solo puede contener letras y espacios', regex='^[a-zA-ZÀ-ÿ\\s]+$')]),
        ),
        migrations.AlterField(
            model_name='comunidad',
            name='municipio',
            field=models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='Municipio solo puede contener letras y espacios', regex='^[a-zA-ZÀ-ÿ\\s]+$')]),
        ),
        migrations.AlterField(
            model_name='comunidad',
            name='nombre',
            field=models.CharField(max_length=100, unique=True, validators=[django.core.validators.RegexValidator(message='Nombre de comunidad solo puede contener letras, números, espacios, guiones y puntos', regex='^[a-zA-ZÀ-ÿ0-9\\s\\-\\.]+$')]),
        ),
        migrations.AlterField(
            model_name='cultivo',
            name='especie',
            field=models.CharField(max_length=100, validators=[django.core.validators.RegexValidator(message='Especie solo puede contener letras y espacios', regex='^[a-zA-ZÀ-ÿ\\s]+$')]),
        ),
        migrations.AlterField(
            model_name='cultivo',
            name='hectareas_sembradas',
            field=models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0.01, message='Hectáreas sembradas debe ser mayor a 0')]),
        ),
        migrations.AlterField(
            model_name='cultivo',
            name='tipo_semilla',
            field=models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Tipo de semilla solo puede contener letras y espacios', regex='^[a-zA-ZÀ-ÿ\\s]+$')]),
        ),
        migrations.AlterField(
            model_name='cultivo',
            name='variedad',
            field=models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='Variedad solo puede contener letras, números, espacios, guiones y puntos', regex='^[a-zA-ZÀ-ÿ0-9\\s\\-\\.]+$')]),
        ),
        migrations.AlterField(
            model_name='parcela',
            name='latitud',
            field=models.DecimalField(blank=True, decimal_places=8, help_text='Latitud en grados decimales', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(-90, message='Latitud debe estar entre -90 y 90'), django.core.validators.MaxValueValidator(90, message='Latitud debe estar entre -90 y 90')]),
        ),
        migrations.AlterField(
            model_name='parcela',
            name='longitud',
            field=models.DecimalField(blank=True, decimal_places=8, help_text='Longitud en grados decimales', max_digits=11, null=True, validators=[django.core.validators.MinValueValidator(-180, message='Longitud debe estar entre -180 y 180'), django.core.validators.MaxValueValidator(180, message='Longitud debe estar entre -180 y 180')]),
        ),
        migrations.AlterField(
            model_name='parcela',
            name='nombre',
            field=models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='Nombre de parcela solo puede contener letras, números, espacios, guiones y puntos', regex='^[a-zA-ZÀ-ÿ0-9\\s\\-\\.]+$')]),
        ),
        migrations.AlterField(
            model_name='parcela',
            name='superficie_hectareas',
            field=models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0.01, message='La superficie debe ser mayor a 0')]),
        ),
        migrations.AlterField(
            model_name='parcela',
            name='tipo_suelo',
            field=models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Tipo de suelo solo puede contener letras y espacios', regex='^[a-zA-ZÀ-ÿ\\s]+$')]),
        ),
        migrations.AlterField(
            model_name='parcela',
            name='ubicacion',
            field=models.TextField(blank=True, null=True, validators=[django.core.validators.RegexValidator(message='Ubicación contiene caracteres inválidos', regex='^[a-zA-ZÀ-ÿ0-9\\s\\-\\.,#]+$')]),
        ),
        migrations.AlterField(
            model_name='rol',
            name='nombre',
            field=models.CharField(max_length=50, unique=True, validators=[django.core.validators.RegexValidator(message='Nombre de rol solo puede contener letras, números, espacios, guiones y guiones bajos', regex='^[a-zA-Z0-9_\\-\\s]+$')]),
        ),
        migrations.AlterField(
            model_name='socio',
            name='codigo_interno',
            field=models.CharField(blank=True, max_length=20, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='Código interno solo puede contener letras mayúsculas, números y guiones', regex='^[A-Z0-9\\-]+$')]),
        ),
        migrations.AlterField(
            model_name='socio',
            name='direccion',
            field=models.TextField(blank=True, null=True, validators=[django.core.validators.RegexValidator(message='Dirección contiene caracteres inválidos', regex='^[a-zA-ZÀ-ÿ0-9\\s\\-\\.,#]+$')]),
        ),
        migrations.AlterField(
            model_name='socio',
            name='usuario',
            field=models.OneToOneField(error_messages={'unique': 'Ya existe un socio asociado a este usuario'}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='usuario',
            name='apellidos',
            field=models.CharField(max_length=100, validators=[django.core.validators.RegexValidator(message='Apellidos solo pueden contener letras y espacios', regex='^[a-zA-ZÀ-ÿ\\s]+$')]),
        ),
        migrations.AlterField(
            model_name='usuario',
            name='ci_nit',
            field=models.CharField(max_length=20, unique=True, validators=[cooperativa.models.validate_ci_nit]),
        ),
        migrations.AlterField(
            model_name='usuario',
            name='email',
            field=models.EmailField(blank=True, max_length=254, null=True, unique=True, validators=[cooperativa.models.validate_email_domain]),
        ),
        migrations.AlterField(
            model_name='usuario',
            name='nombres',
            field=models.CharField(max_length=100, validators=[django.core.validators.RegexValidator(message='Nombres solo pueden contener letras y espacios', regex='^[a-zA-ZÀ-ÿ\\s]+$')]),
        ),
        migrations.AlterField(
            model_name='usuario',
            name='telefono',
            field=models.CharField(blank=True, max_length=20, null=True, validators=[django.core.validators.RegexValidator(message='Formato de teléfono inválido', regex='^\\+?[0-9\\s\\-\\(\\)]+$')]),
        ),
        migrations.AlterField(
            model_name='usuario',
            name='usuario',
            field=models.CharField(max_length=50, unique=True, validators=[django.core.validators.RegexValidator(message='Usuario solo puede contener letras, números y guiones bajos', regex='^[a-zA-Z0-9_]+$')]),
        ),
        migrations.CreateModel(
            name='AnalisisSuelo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha_analisis', models.DateField()),
                ('ph', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(0, message='El pH debe ser positivo'), django.core.validators.MaxValueValidator(14, message='El pH no puede exceder 14')])),
                ('materia_organica', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0, message='La materia orgánica no puede ser negativa')])),
                ('nitrogeno', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0, message='El nitrógeno no puede ser negativo')])),
                ('fosforo', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0, message='El fósforo no puede ser negativo')])),
                ('potasio', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0, message='El potasio no puede ser negativo')])),
                ('laboratorio', models.CharField(blank=True, max_length=100, null=True)),
                ('recomendaciones', models.TextField(blank=True, null=True)),
                ('costo_analisis', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True, validators=[django.core.validators.MinValueValidator(0, message='El costo no puede ser negativo')])),
                ('creado_en', models.DateTimeField(default=django.utils.timezone.now)),
                ('parcela', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cooperativa.parcela')),
            ],
            options={
                'verbose_name': 'Análisis de Suelo',
                'verbose_name_plural': 'Análisis de Suelo',
                'db_table': 'analisis_suelo',
                'ordering': ['-fecha_analisis'],
            },
        ),
        migrations.CreateModel(
            name='CicloCultivo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha_inicio', models.DateField()),
                ('fecha_estimada_fin', models.DateField()),
                ('fecha_fin_real', models.DateField(blank=True, null=True)),
                ('estado', models.CharField(choices=[('PLANIFICADO', 'Planificado'), ('SIEMBRA', 'En Siembra'), ('CRECIMIENTO', 'En Crecimiento'), ('COSECHA', 'En Cosecha'), ('FINALIZADO', 'Finalizado'), ('CANCELADO', 'Cancelado')], default='PLANIFICADO', max_length=20)),
                ('observaciones', models.TextField(blank=True, null=True)),
                ('costo_estimado', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(0, message='El costo no puede ser negativo')])),
                ('costo_real', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(0, message='El costo no puede ser negativo')])),
                ('rendimiento_esperado', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0, message='El rendimiento no puede ser negativo')])),
                ('rendimiento_real', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0, message='El rendimiento no puede ser negativo')])),
                ('unidad_rendimiento', models.CharField(default='kg/ha', help_text='Unidad de medida del rendimiento (kg/ha, qq/ha, etc.)', max_length=20)),
                ('creado_en', models.DateTimeField(default=django.utils.timezone.now)),
                ('actualizado_en', models.DateTimeField(auto_now=True)),
                ('cultivo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cooperativa.cultivo')),
            ],
            options={
                'verbose_name': 'Ciclo de Cultivo',
                'verbose_name_plural': 'Ciclos de Cultivo',
                'db_table': 'ciclo_cultivo',
                'ordering': ['-fecha_inicio'],
            },
        ),
        migrations.CreateModel(
            name='Cosecha',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha_cosecha', models.DateField()),
                ('cantidad_cosechada', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0, message='La cantidad no puede ser negativa')])),
                ('unidad_medida', models.CharField(default='kg', help_text='Unidad de medida (kg, qq, toneladas, etc.)', max_length=20)),
                ('calidad', models.CharField(choices=[('EXCELENTE', 'Excelente'), ('BUENA', 'Buena'), ('REGULAR', 'Regular'), ('MALA', 'Mala')], default='BUENA', max_length=20)),
                ('precio_venta', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0, message='El precio no puede ser negativo')])),
                ('observaciones', models.TextField(blank=True, null=True)),
                ('creado_en', models.DateTimeField(default=django.utils.timezone.now)),
                ('ciclo_cultivo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cooperativa.ciclocultivo')),
            ],
            options={
                'verbose_name': 'Cosecha',
                'verbose_name_plural': 'Cosechas',
                'db_table': 'cosecha',
                'ordering': ['-fecha_cosecha'],
            },
        ),
        migrations.CreateModel(
            name='TransferenciaParcela',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha_transferencia', models.DateField()),
                ('motivo', models.TextField()),
                ('documento_legal', models.CharField(blank=True, max_length=100, null=True)),
                ('costo_transferencia', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0, message='El costo no puede ser negativo')])),
                ('observaciones', models.TextField(blank=True, null=True)),
                ('creado_en', models.DateTimeField(default=django.utils.timezone.now)),
                ('autorizado_por', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transferencias_autorizadas', to=settings.AUTH_USER_MODEL)),
                ('parcela', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cooperativa.parcela')),
                ('socio_anterior', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parcelas_transferidas', to='cooperativa.socio')),
                ('socio_nuevo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parcelas_recibidas', to='cooperativa.socio')),
            ],
            options={
                'verbose_name': 'Transferencia de Parcela',
                'verbose_name_plural': 'Transferencias de Parcelas',
                'db_table': 'transferencia_parcela',
                'ordering': ['-fecha_transferencia'],
            },
        ),
        migrations.CreateModel(
            name='Tratamiento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tipo_tratamiento', models.CharField(choices=[('FERTILIZANTE', 'Fertilizante'), ('PESTICIDA', 'Pesticida'), ('HERBICIDA', 'Herbicida'), ('FUNGICIDA', 'Fungicida'), ('REGULADOR', 'Regulador de Crecimiento'), ('RIEGO', 'Riego'), ('LABOR', 'Labor Cultural'), ('OTRO', 'Otro')], max_length=20)),
                ('nombre_producto', models.CharField(max_length=100)),
                ('dosis', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0, message='La dosis no puede ser negativa')])),
                ('unidad_dosis', models.CharField(default='kg/ha', help_text='Unidad de dosis (kg/ha, l/ha, etc.)', max_length=20)),
                ('fecha_aplicacion', models.DateField()),
                ('costo', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0, message='El costo no puede ser negativo')])),
                ('observaciones', models.TextField(blank=True, null=True)),
                ('aplicado_por', models.CharField(blank=True, max_length=100, null=True)),
                ('creado_en', models.DateTimeField(default=django.utils.timezone.now)),
                ('ciclo_cultivo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cooperativa.ciclocultivo')),
            ],
            options={
                'verbose_name': 'Tratamiento',
                'verbose_name_plural': 'Tratamientos',
                'db_table': 'tratamiento',
                'ordering': ['-fecha_aplicacion'],
            },
        ),
    ]
